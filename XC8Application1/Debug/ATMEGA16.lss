
ATMEGA16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000236  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ca6  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006fd  00000000  00000000  00000f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000374  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d1  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000126  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 0000000f  000000a8  000000a8  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    0000002e  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_intialize 0000004e  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_send_data 00000008  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_send_string 0000003e  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.libgcc.div 00000044  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  a0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000188 <main>:

int main(void)
{
	//------------TX-----------
	
	USART_intialize(9600);
 188:	60 e8       	ldi	r22, 0x80	; 128
 18a:	75 e2       	ldi	r23, 0x25	; 37
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_intialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f e5       	ldi	r18, 0x5F	; 95
 196:	8a ee       	ldi	r24, 0xEA	; 234
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x12>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x1c>
 1a4:	00 00       	nop
	_delay_ms(300);
	USART_send_string("mohamed yasser");
 1a6:	68 ea       	ldi	r22, 0xA8	; 168
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_send_string>
		LCD_send_char(x,'a','b',0,'b',1);
	
	}
	*/
	
}
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

Disassembly of section .text.USART_intialize:

000000b8 <USART_intialize>:

unsigned char USART_read_data(void)
{
	while(read_bit(UCSRA,RXC)==0);
	return UDR;
}
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	aa 1f       	adc	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	9c 01       	movw	r18, r24
  ce:	ad 01       	movw	r20, r26
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	44 1f       	adc	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	44 1f       	adc	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	72 e1       	ldi	r23, 0x12	; 18
  e4:	8a e7       	ldi	r24, 0x7A	; 122
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 83 00 	call	0x106	; 0x106 <__udivmodsi4>
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	31 09       	sbc	r19, r1
  f0:	30 bd       	out	0x20, r19	; 32
  f2:	29 b9       	out	0x09, r18	; 9
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	86 e8       	ldi	r24, 0x86	; 134
 102:	80 bd       	out	0x20, r24	; 32
 104:	08 95       	ret

Disassembly of section .text.USART_send_data:

000001b6 <USART_send_data>:
}

void USART_send_data (unsigned char data)
{
	
	while(read_bit(UCSRA,UDRE)==0);
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <USART_send_data>
	UDR=data;
 1ba:	8c b9       	out	0x0c, r24	; 12
 1bc:	08 95       	ret

Disassembly of section .text.USART_send_string:

0000014a <USART_send_string>:
	while(read_bit(UCSRA,RXC)==0);
	return UDR;
}

void USART_send_string(const char *ptr)
{
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	6b 01       	movw	r12, r22
 152:	e8 2e       	mov	r14, r24
	while(*ptr !=0)
 154:	0f c0       	rjmp	.+30     	; 0x174 <USART_send_string+0x2a>
	{
		USART_send_data(*ptr);
 156:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_send_data>
		ptr++;
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	c2 1a       	sub	r12, r18
 15e:	d2 0a       	sbc	r13, r18
 160:	e2 0a       	sbc	r14, r18
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	90 e7       	ldi	r25, 0x70	; 112
 166:	22 e0       	ldi	r18, 0x02	; 2
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <USART_send_string+0x1e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <USART_send_string+0x28>
 172:	00 00       	nop
	return UDR;
}

void USART_send_string(const char *ptr)
{
	while(*ptr !=0)
 174:	f6 01       	movw	r30, r12
 176:	84 91       	lpm	r24, Z
 178:	e7 fc       	sbrc	r14, 7
 17a:	80 81       	ld	r24, Z
 17c:	81 11       	cpse	r24, r1
 17e:	eb cf       	rjmp	.-42     	; 0x156 <USART_send_string+0xc>
	{
		USART_send_data(*ptr);
		ptr++;
		_delay_ms(100);
	}
 180:	ef 90       	pop	r14
 182:	df 90       	pop	r13
 184:	cf 90       	pop	r12
 186:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000106 <__udivmodsi4>:
 106:	a1 e2       	ldi	r26, 0x21	; 33
 108:	1a 2e       	mov	r1, r26
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	fd 01       	movw	r30, r26
 110:	0d c0       	rjmp	.+26     	; 0x12c <__udivmodsi4_ep>

00000112 <__udivmodsi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	ee 1f       	adc	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	e4 07       	cpc	r30, r20
 120:	f5 07       	cpc	r31, r21
 122:	20 f0       	brcs	.+8      	; 0x12c <__udivmodsi4_ep>
 124:	a2 1b       	sub	r26, r18
 126:	b3 0b       	sbc	r27, r19
 128:	e4 0b       	sbc	r30, r20
 12a:	f5 0b       	sbc	r31, r21

0000012c <__udivmodsi4_ep>:
 12c:	66 1f       	adc	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	88 1f       	adc	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	1a 94       	dec	r1
 136:	69 f7       	brne	.-38     	; 0x112 <__udivmodsi4_loop>
 138:	60 95       	com	r22
 13a:	70 95       	com	r23
 13c:	80 95       	com	r24
 13e:	90 95       	com	r25
 140:	9b 01       	movw	r18, r22
 142:	ac 01       	movw	r20, r24
 144:	bd 01       	movw	r22, r26
 146:	cf 01       	movw	r24, r30
 148:	08 95       	ret
